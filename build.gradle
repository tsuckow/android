allprojects {
    repositories {
        jcenter()
        maven { url "https://jitpack.io" }
    }
}

buildscript {
    repositories {
        maven { url '/home/tsuckow/Projects/gradle/out/repo' }
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'
        classpath 'org.ajoberstar:gradle-git:0.2.3'
    }
}

ext {
    supportVersion = '25.0.1'
}

import org.ajoberstar.gradle.git.tasks.GitClone

task cloneCjdns(type: GitClone) {
    def destination = file("cjdns-src")

    uri = "https://github.com/benhylau/cjdns"
    // Use this repo until patch is merged in cjdelisle/cjdns
    destinationPath = destination
    bare = false
    enabled = !destination.exists() // Clone only on first run
}

task buildCjdns(type: Exec) {
    workingDir file("cjdns-src")
    commandLine file("cjdns-src/android_do")
}

task copyNativeArtifacts {
    copy {
        from 'cjdns-src/build_android/out/'
        //into 'src/main/assets/'
        into buildDir.absolutePath + '/intermediates/assets/debug/'
    }
}

apply plugin: CustomNDK
apply plugin: 'com.android.application'
apply plugin: 'checkstyle'

android {
    buildToolsVersion "25.0.1"
    compileSdkVersion 25

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 25
        versionCode 1
        versionName "1.0.0-SNAPSHOT"

       externalNativeBuild {
            ndkBuild {
                cppFlags ""

                //abiFilters "armeabi-v7a","arm64-v8a","x86","x86_64","mips","mips64"
            }
        }
    }
/*
    sourceSets.main {
        jni.srcDirs = []
        jniLibs.srcDir 'src/main/libs'
    }
*/
    signingConfigs {
        release
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    externalNativeBuild {
        ndkBuild {
            path "src/main/jni/Android.mk"
        }
    }

    /*splits {
        abi {
            enable true
            //Do them all individually.
            //reset()
            //include "armeabi-v7a","arm64-v8a","x86","x86_64","mips","mips64" //select ABIs to build APKs for
            //universalApk true //generate an additional APK that contains all the ABIs
        }
    }*/
}

afterEvaluate {
    if (COMPILE_CJDNS_NATIVE_ARTIFACTS.toBoolean()) {
        android.applicationVariants.all { variant ->
            variant.javaCompiler.dependsOn(cloneCjdns)
        }
    } else {
        println "COMPILE_CJDNS_NATIVE_ARTIFACTS is false, skipping build"
    }
}

cloneCjdns.finalizedBy(buildCjdns)
buildCjdns.finalizedBy(copyNativeArtifacts)

dependencies {
    compile "com.android.support:support-v4:$supportVersion"
    compile "com.android.support:appcompat-v7:$supportVersion"
    compile "com.android.support:cardview-v7:$supportVersion"
    compile "com.android.support:recyclerview-v7:$supportVersion"
    compile "com.android.support:preference-v7:$supportVersion"
    compile "com.android.support:preference-v14:$supportVersion"
    compile 'com.jakewharton:butterknife:6.0.0'
    compile 'com.joanzapata.android:android-iconify:1.0.9'
    compile('com.github.afollestad.material-dialogs:core:0.8.5.3@aar') {
        transitive = true
    }
    compile 'com.melnykov:floatingactionbutton:1.1.0'
    compile 'com.github.brnunes:swipeablerecyclerview:1.0.1'
    compile 'io.reactivex:rxjava:1.0.7'
    compile 'io.reactivex:rxandroid:0.24.0'
    compile 'com.squareup:otto:1.3.5'
    compile 'com.google.dagger:dagger:2.8'
    provided 'com.google.dagger:dagger-compiler:2.8'
}

if (project.hasProperty('keyAlias')) {
    android.signingConfigs.release.keyAlias = keyAlias
}
if (project.hasProperty('keyPassword')) {
    android.signingConfigs.release.keyPassword = keyPassword
}
if (project.hasProperty('storeFile')) {
    android.signingConfigs.release.storeFile = file(storeFile)
}
if (project.hasProperty('storePassword')) {
    android.signingConfigs.release.storePassword = storePassword
}

class CustomNDK implements Plugin<Project> {
    void apply(Project project) {
        /*project.extensions.create("greeting", GreetingPluginExtension)
        project.task('hello') {
            doLast {
                println "${project.greeting.message} from ${project.greeting.greeter}"
            }
        }*/
    }
}

android.applicationVariants.all { variant ->
    task ("myCustomTaskConfig${variant.name.capitalize()}") {
        println "*** CONFIG ***"
        println variant.name.capitalize() + android.ndkDirectory
    }
    task ("myCustomTask${variant.name.capitalize()}") << {
        println "*** TEST ***"
        println variant.name.capitalize()
    }
}

import com.android.build.gradle.internal.ndk.NdkHandler

afterEvaluate {
    def filtered = ['class', 'active']

    /*println "Android: " + android.properties
            .sort{it.key}
            .collect{it}
            .findAll{!filtered.contains(it.key)}
            .join('\n')*/

    println buildDir

    def handler = new NdkHandler(project.getRootDir(),
            project.getExtensions().getByName("android").getCompileSdkVersion(),
            "gcc",
            "")
    println "ABIS: "
    handler.getSupportedAbis().each { abi ->
        println abi.name + handler.getCppCompiler(abi)
    }
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            println "Output: " + output.getFilter(com.android.build.OutputFile.ABI)

            /*def filtered = ['class', 'active']

            println output.properties
                    .sort{it.key}
                    .collect{it}
                    .findAll{!filtered.contains(it.key)}
                    .join('\n')*/

            task ("my4CustomTaskConfig${variant.name.capitalize()}${output.getFilter(com.android.build.OutputFile.ABI)}") << {
                println "^^ ASSEMBLE " + output.getFilter(com.android.build.OutputFile.ABI)
            }
            output.assemble.finalizedBy("my4CustomTaskConfig${variant.name.capitalize()}${output.getFilter(com.android.build.OutputFile.ABI)}")
        }

        task ("my3CustomTaskConfig${variant.name.capitalize()}") << {
            println "### CONFIG ***"
            println variant.name.capitalize()
            def filtered = ['class', 'active']

            println variant.properties
                    .sort{it.key}
                    .collect{it}
                    .findAll{!filtered.contains(it.key)}
                    .join('\n')
        }
        variant.javaCompiler.dependsOn("my3CustomTaskConfig${variant.name.capitalize()}")

        task ("my2CustomTaskConfig${variant.name.capitalize()}") {
            println "%%% CONFIG ***"
            println variant.name.capitalize()
        }
        task ("my2CustomTask${variant.name.capitalize()}") << {
            println "%%% TEST ***"
            println variant.name.capitalize()
        }
    }
}


