allprojects {
    repositories {
        jcenter()
        maven { url "https://jitpack.io" }
    }
}

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'
        classpath 'org.ajoberstar:gradle-git:0.2.3'
        classpath "com.moowork.gradle:gradle-node-plugin:1.1.0"
        classpath "gradle.plugin.com.jetbrains.python:gradle-python-envs:0.0.12"
    }
}

ext {
    supportVersion = '25.0.1'
}

def projectAbiFilters = ["armeabi","armeabi-v7a","arm64-v8a","x86","x86_64"]
/*,"mips" */ //No dynamic linking
/*,"mips64" */ //Broken tuntap adapter
//interface/tuntap/TUNInterface_linux.c:67:23: error: overflow in implicit constant conversion [-Werror=overflow]
//if (ioctl(fileno, TUNSETIFF, &ifRequest) < 0) {
//                  ^

import org.ajoberstar.gradle.git.tasks.GitClone

apply plugin: 'com.moowork.node'

node {
    // Version of node to use.
    version = '6.11.1'
    // Enabled the automatic download.
    download = true
}

task cloneCjdns(type: GitClone) {
    def destination = file("cjdns-src")

    uri = "https://github.com/benhylau/cjdns"
    // Use this repo until patch is merged in cjdelisle/cjdns
    destinationPath = destination
    bare = false
    enabled = !destination.exists() // Clone only on first run
}
/*
task buildCjdns(type: Exec) {
    workingDir file("cjdns-src")
    commandLine file("cjdns-src/android_do")
}
*/

task buildCjdns {

}

apply plugin: 'com.android.application'
apply plugin: 'checkstyle'

android {
    buildToolsVersion "25.0.1"
    compileSdkVersion 24

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 24
        versionCode 1
        versionName "1.0.0-SNAPSHOT"

        externalNativeBuild {
            ndkBuild {
                cppFlags ""

                abiFilters = projectAbiFilters
            }
        }
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    externalNativeBuild {
        ndkBuild {
            path "src/main/jni/Android.mk"
        }
    }

    /*splits {
        abi {
            enable true
            //Do them all individually.
            //reset()
            //include "armeabi-v7a","arm64-v8a","x86","x86_64","mips","mips64" //select ABIs to build APKs for
            //universalApk true //generate an additional APK that contains all the ABIs
        }
    }*/
}

afterEvaluate {
    if (COMPILE_CJDNS_NATIVE_ARTIFACTS.toBoolean()) {
        android.applicationVariants.all { variant ->
            variant.javaCompiler.dependsOn(cloneCjdns)
        }
    } else {
        println "COMPILE_CJDNS_NATIVE_ARTIFACTS is false, skipping build"
    }
}

cloneCjdns.finalizedBy(buildCjdns)

dependencies {
    compile "com.android.support:support-v4:$supportVersion"
    compile "com.android.support:appcompat-v7:$supportVersion"
    compile "com.android.support:cardview-v7:$supportVersion"
    compile "com.android.support:recyclerview-v7:$supportVersion"
    compile "com.android.support:preference-v7:$supportVersion"
    compile "com.android.support:preference-v14:$supportVersion"
    compile 'com.jakewharton:butterknife:6.0.0'
    compile 'com.joanzapata.android:android-iconify:1.0.9'
    compile('com.github.afollestad.material-dialogs:core:0.8.5.3@aar') {
        transitive = true
    }
    compile 'com.melnykov:floatingactionbutton:1.1.0'
    compile 'com.github.brnunes:swipeablerecyclerview:1.0.1'
    compile 'io.reactivex:rxjava:1.0.7'
    compile 'io.reactivex:rxandroid:0.24.0'
    compile 'com.squareup:otto:1.3.5'
    compile 'com.google.dagger:dagger:2.8'
    provided 'com.google.dagger:dagger-compiler:2.8'
}

if (project.hasProperty('keyAlias')) {
    android.signingConfigs.release.keyAlias = keyAlias
}
if (project.hasProperty('keyPassword')) {
    android.signingConfigs.release.keyPassword = keyPassword
}
if (project.hasProperty('storeFile')) {
    android.signingConfigs.release.storeFile = file(storeFile)
}
if (project.hasProperty('storePassword')) {
    android.signingConfigs.release.storePassword = storePassword
}


/*
android.applicationVariants.all { variant ->
    task ("myCustomTaskConfig${variant.name.capitalize()}") {
        println "*** CONFIG ***"
        println variant.name.capitalize() + android.ndkDirectory
    }
    task ("myCustomTask${variant.name.capitalize()}") << {
        println "*** TEST ***"
        println variant.name.capitalize()
    }
}
*/
import com.android.build.gradle.internal.ndk.NdkHandler
import com.android.build.gradle.internal.ndk.Stl;

afterEvaluate {
    def filtered = ['class', 'active']

    println 'Build DIR: ' + buildDir.absolutePath

/*
    println android.properties
            .sort{it.key}
            .collect{it}
            .findAll{!filtered.contains(it.key)}
            .join(' \n')
*/
    //Internal Class of NDK, may change without notice
    def handler = new NdkHandler(project.getRootDir(),
            project.getExtensions().getByName("android").getCompileSdkVersion(),
            "gcc",
            "")

    //android.ext

    println 'Available ABIs: ' + handler.getSupportedAbis().name.toString()
    def abis = handler.getSupportedAbis().findAll { it.name in projectAbiFilters };
    println 'Enabled ABIs: ' + abis.name.toString()
    abis.each { abi ->
        def toolchain = handler.getCCompiler(abi).absolutePath.replaceFirst( /(.*[\/\\]prebuilt[\/\\][^\/\\]+)[\/\\].*/, '$1' )
        def taskName = "buildCjdns${abi.name}"
        def CROSS = handler.getCCompiler(abi).absolutePath.replaceAll('gcc$','')
        def TEMP = System.getProperty("java.io.tmpdir")
        def systemIncludes = handler.getStlNativeToolSpecification(Stl.getById('system'), null, abi).getIncludes().collect({'-I'+it}).join(' ')
        def CFLAGS = "--sysroot=" + handler.getSysroot(abi) + ' ' + systemIncludes
        def LDFLAGS = "--sysroot=" + handler.getSysroot(abi)

        //Determining the paths in the ndk is not easy...
        def tools = handler.getNdkDirectory().absolutePath + handler.getCCompiler(abi).absolutePath.replaceFirst( /.*([\/\\]prebuilt[\/\\][^\/\\]+[\/\\]).*/, '$1' ) + 'bin'

        task (taskName, type: NodeTask) {
            script = file('make_cjdns.js')
            execOverrides {
                it.workingDir = 'cjdns-src'
                it.environment << [
                        CC: handler.getCCompiler(abi),
                        GCC: handler.getCCompiler(abi),
                        CFLAGS: CFLAGS,
                        LIBRARY_PATH: handler.getSysroot(abi), //For libuv
                        CPATH: handler.getSysroot(abi) + '/usr/include', //For libuv
                        LDFLAGS: LDFLAGS,
                        CROSS: CROSS,
                        PLATFORM: "android",
                        SYSTEM: "linux",
                        CJDNS_BUILD_TMPDIR: TEMP,
                        AR: handler.getAr(abi),
                        RANLIB: handler.getCCompiler(abi).absolutePath.replaceAll('gcc$','ranlib'),
                        PATH: tools + System.getProperty("path.separator") + "${System.env.PATH}"
                ]
            }
        }
        buildCjdns.dependsOn(taskName)

        task ( taskName + '-COPY', type: Copy) {
            from 'cjdns-src'
            include 'cjdroute', 'cjdroute-init'
            //into 'src/main/assets/'
            into buildDir.absolutePath + "/intermediates/assets/debug/${abi.name}/"
        }

        tasks[taskName].finalizedBy(taskName + '-COPY')

    }
}
